{"ast":null,"code":"var _jsxFileName = \"/home/zeus/Documentos/Proyectos/Laboratorio/tp3-calculadora/src/Componentes/Calculadora.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Boton from './Boton'; //VARIABLES\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet numero1 = null,\n    numero2 = null,\n    operador = '';\nconst historia = []; //FUNCION PRINCIPAL\n\nconst Calculadora = () => {\n  _s();\n\n  //ESTADO\n  //const [resultado,setResultado] = useState('0');\n  const [operacion, setOperacion] = useState('0'); //FUNCIONES POR NUMERO\n\n  const Numero1 = props => {\n    //setResultado(`${resultado}${props}`);\n    if (props === '+' || props === '-' || props === '/' || props === '*') {\n      operador = props;\n      setOperacion(`${numero1} ${operador}`); //setResultado('');\n    } else if (numero1 != null) {\n      numero1 = numero1 + props;\n    } else numero1 = props;\n  };\n\n  const Numero2 = props => {\n    setOperacion(`${operacion}${props}`);\n\n    if (props === '=') {\n      setOperacion(`${operacion} ${props}`);\n    } else if (numero2 != null) {\n      numero2 = numero2 + props;\n    } else numero2 = props;\n  }; //FUNCION PRICIPAL DE ASIGANCION DE NUMEROS\n\n\n  const actualizarResultado = props => {\n    if (operacion === '') {\n      Numero1(props);\n    } else {\n      Numero2(props);\n\n      if (props === '=') {\n        iniciarHistoria();\n        calcular();\n      }\n    }\n  }; //LIMPIAR DISPLAY\n\n\n  const limpiarDisplay = () => {\n    //setResultado('');\n    setOperacion('');\n    numero1 = null;\n    numero2 = null;\n    operador = '';\n  }; //HISTORIAL\n\n\n  const iniciarHistoria = () => {\n    historia.push(operacion);\n  };\n\n  const mostrarHistoria = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: historia.map((item, index) => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Esto funciona\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 36\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }; //CALCULAR EL RESULTADO\n\n\n  const calcular = () => {\n    let r;\n\n    switch (operador) {\n      case '+':\n        r = Number(numero1) + Number(numero2);\n        setOperacion(`${String(r)}`);\n        break;\n\n      case '-':\n        r = Number(numero1) - Number(numero2);\n        setOperacion(`${String(r)}`);\n        break;\n\n      case '*':\n        r = Number(numero1) * Number(numero2);\n        setOperacion(`${String(r)}`);\n        break;\n\n      case '/':\n        r = Number(numero1) / Number(numero2);\n        setOperacion(`${String(r)}`);\n        break;\n\n      default:\n        setOperacion(`$error`);\n        break;\n    }\n  }; //se puede sacar resultado\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"container d-flex justify-content-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"col-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"d-flex justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: operacion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"d-flex justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(Boton, {\n          actualizar: actualizarResultado,\n          limpiar: limpiarDisplay,\n          historia: mostrarHistoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Calculadora, \"NQgU1nHa7j1kr5nmWO4dG4XnGZw=\");\n\n_c = Calculadora;\nexport default Calculadora;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calculadora\");","map":{"version":3,"sources":["/home/zeus/Documentos/Proyectos/Laboratorio/tp3-calculadora/src/Componentes/Calculadora.js"],"names":["React","useState","Boton","numero1","numero2","operador","historia","Calculadora","operacion","setOperacion","Numero1","props","Numero2","actualizarResultado","iniciarHistoria","calcular","limpiarDisplay","push","mostrarHistoria","map","item","index","r","Number","String"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport Boton from './Boton';\n\n//VARIABLES\nlet numero1=null,numero2=null,operador='';\nconst historia = [];\n\n//FUNCION PRINCIPAL\nconst Calculadora = () =>{\n    //ESTADO\n    //const [resultado,setResultado] = useState('0');\n    const [operacion,setOperacion] = useState('0');\n\n    //FUNCIONES POR NUMERO\n    const Numero1 = (props) =>{\n        //setResultado(`${resultado}${props}`);\n        if(props === '+' ||props === '-'||props === '/'||props === '*')\n        {\n            operador = props;\n            setOperacion(`${numero1} ${operador}`);\n            //setResultado('');\n        }\n        else if(numero1 != null)\n        {\n            numero1 = numero1+props;\n        }\n        else numero1 = props;\n    }\n    const Numero2 = (props) =>{\n        setOperacion(`${operacion}${props}`);\n        if(props === '=')\n        {\n            setOperacion(`${operacion} ${props}`);\n        }\n        else if(numero2 != null)\n        {\n            numero2 = numero2+props;\n        }\n        else numero2 = props;\n    }\n    //FUNCION PRICIPAL DE ASIGANCION DE NUMEROS\n    const actualizarResultado =(props)=>{\n        if(operacion === '')\n        {\n            Numero1(props);\n        }\n        else \n        {\n            Numero2(props);\n            if(props ==='=')\n            {\n                iniciarHistoria();\n                calcular();\n            }\n        }\n    }\n    //LIMPIAR DISPLAY\n    const limpiarDisplay = ()=>{\n        //setResultado('');\n        setOperacion('');\n        numero1=null;\n        numero2=null;\n        operador='';\n    }\n    //HISTORIAL\n    const iniciarHistoria =()=>{\n        historia.push(operacion);\n    }\n    const mostrarHistoria = ()=>{\n        return(\n            <>\n                <ul>\n                    {\n                        historia.map((item,index)=>{\n                            return <li key={index}>Esto funciona</li>\n                        })\n                    }\n                </ul>\n            </>\n        );\n    }\n\n    //CALCULAR EL RESULTADO\n    const calcular =()=>{\n        let r;\n        switch(operador){\n            case '+':\n                r = Number(numero1) + Number(numero2);\n                setOperacion(`${String(r)}`);\n                break;\n            case '-':\n                r = Number(numero1) - Number(numero2);\n                setOperacion(`${String(r)}`);\n                break;\n            case '*':\n                r = Number(numero1) * Number(numero2);\n                setOperacion(`${String(r)}`);\n                break;\n            case '/':\n                r = Number(numero1) / Number(numero2);\n                setOperacion(`${String(r)}`);\n                break;\n            default:\n                setOperacion(`$error`);\n                break;\n        }\n    }\n    //se puede sacar resultado\n    return(\n        <div class='container d-flex justify-content-center'>\n            <div class='col-4'>\n                <div class='d-flex justify-content-center'>\n                    <h3>{operacion}</h3>\n                </div>\n                <div class='d-flex justify-content-center'>\n                    <Boton actualizar={actualizarResultado} limpiar={limpiarDisplay} historia={mostrarHistoria}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Calculadora;"]},"metadata":{},"sourceType":"module"}