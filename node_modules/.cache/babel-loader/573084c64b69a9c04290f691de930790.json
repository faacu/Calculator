{"ast":null,"code":"var _jsxFileName = \"/home/zeus/Documentos/Proyectos/Laboratorio/tp3-calculadora/src/Componentes/Calculadora.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Boton from './Boton'; //VARIABLES\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet numero1 = null,\n    numero2 = null,\n    operador = '';\nconst historia = []; //FUNCION PRINCIPAL\n\nconst Calculadora = () => {\n  _s();\n\n  //ESTADO\n  const [resultado, setResultado] = useState('');\n  const [operacion, setOperacion] = useState(''); //FUNCIONES POR NUMERO\n\n  const Numero1 = props => {\n    setResultado(resultado + props);\n\n    if (props === '+' || props === '-' || props === '/' || props === '*') {\n      operador = props;\n      setOperacion(`${numero1} ${operador}`);\n      setResultado('');\n    } else if (numero1 != null) {\n      numero1 = numero1 + props;\n    } else numero1 = props;\n  };\n\n  const Numero2 = props => {\n    setResultado(resultado + props);\n\n    if (props === '=') {\n      setOperacion(`${operacion} ${numero2} = `);\n      setResultado('');\n      setTimeout();\n    } else if (numero2 != null) {\n      numero2 = numero2 + props;\n    } else numero2 = props;\n  }; //FUNCION PRICIPAL DE ASIGANCION DE NUMEROS\n\n\n  const actualizarResultado = props => {\n    if (operacion === '') {\n      Numero1(props);\n    } else Numero2(props);\n  }; //LIMPIAR DISPLAY\n\n\n  const limpiarDisplay = () => {\n    setResultado('');\n    setOperacion('');\n  }; //HISTORIAL\n\n\n  const iniciarHistoria = () => {\n    historia.push(operacion);\n  }; //CALCULAR EL RESULTADO\n\n\n  const calcular = () => {\n    let r;\n\n    switch (operador) {\n      case '+':\n        r = Number(numero1) + Number(numero2);\n        setOperacion(`${operacion} ${String(r)}`);\n        setResultado(r);\n        break;\n\n      case '-':\n        r = Number(numero1) - Number(numero2);\n        setOperacion(operacion + r);\n        setResultado(r);\n        break;\n\n      case '*':\n        r = Number(numero1) * Number(numero2);\n        setOperacion(operacion + r);\n        setResultado(r);\n        break;\n\n      case '/':\n        r = Number(numero1) / Number(numero2);\n        setOperacion(operacion + r);\n        setResultado(r);\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: operacion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: resultado\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Boton, {\n      actualizar: actualizarResultado,\n      limpiar: limpiarDisplay,\n      historia: iniciarHistoria\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Calculadora, \"xPWEOT2/FXEn0bDb0nHNTV0nLYU=\");\n\n_c = Calculadora;\nexport default Calculadora;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calculadora\");","map":{"version":3,"sources":["/home/zeus/Documentos/Proyectos/Laboratorio/tp3-calculadora/src/Componentes/Calculadora.js"],"names":["React","useState","Boton","numero1","numero2","operador","historia","Calculadora","resultado","setResultado","operacion","setOperacion","Numero1","props","Numero2","setTimeout","actualizarResultado","limpiarDisplay","iniciarHistoria","push","calcular","r","Number","String"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport Boton from './Boton';\n\n//VARIABLES\nlet numero1=null,numero2=null,operador='';\nconst historia = [];\n\n//FUNCION PRINCIPAL\nconst Calculadora = () =>{\n    //ESTADO\n    const [resultado,setResultado] = useState('');\n    const [operacion,setOperacion] = useState('')\n\n    //FUNCIONES POR NUMERO\n    const Numero1 = (props) =>{\n        setResultado(resultado+props);\n        if(props === '+' ||props === '-'||props === '/'||props === '*')\n        {\n            operador = props;\n            setOperacion(`${numero1} ${operador}`);\n            setResultado('');\n        }\n        else if(numero1 != null)\n        {\n            numero1 = numero1+props;\n        }\n        else numero1 = props;\n    }\n    const Numero2 = (props) =>{\n        setResultado(resultado+props);\n        if(props === '=')\n        {\n            setOperacion(`${operacion} ${numero2} = `);\n            setResultado('');\n            setTimeout()\n        }\n        else if(numero2 != null)\n        {\n            numero2 = numero2+props;\n        }\n        else numero2 = props;\n    }\n    //FUNCION PRICIPAL DE ASIGANCION DE NUMEROS\n    const actualizarResultado =(props)=>{\n        if(operacion === '')\n        {\n            Numero1(props);\n        }\n        else Numero2(props);\n    }\n    //LIMPIAR DISPLAY\n    const limpiarDisplay = ()=>{\n        setResultado('');\n        setOperacion('');\n    }\n    //HISTORIAL\n    const iniciarHistoria =()=>{\n        historia.push(operacion);\n    }\n    //CALCULAR EL RESULTADO\nconst calcular =()=>{\n    let r;\n    switch(operador){\n        case '+':\n            r = Number(numero1) + Number(numero2);\n            setOperacion(`${operacion} ${String(r)}`);\n            setResultado(r);\n            break;\n        case '-':\n            r = Number(numero1) - Number(numero2);\n            setOperacion(operacion+r);\n            setResultado(r);\n            break;\n        case '*':\n            r = Number(numero1) * Number(numero2);\n            setOperacion(operacion+r);\n            setResultado(r);\n            break;\n        case '/':\n            r = Number(numero1) / Number(numero2);\n            setOperacion(operacion+r);\n            setResultado(r);\n            break;\n    }\n}\n\n    return(\n        <>\n            <h2>{operacion}</h2>\n            <h2>{resultado}</h2>\n            <Boton actualizar={actualizarResultado} limpiar={limpiarDisplay} historia={iniciarHistoria}/>\n        </>\n    );\n}\n\nexport default Calculadora;"]},"metadata":{},"sourceType":"module"}